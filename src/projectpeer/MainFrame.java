package projectpeer;

import java.io.BufferedReader;
import java.io.Console;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Ziheng Cong
 */

public class MainFrame extends javax.swing.JFrame {
    
    String groupIP; //Group IP for the overlay
    String peerID; //The ID of the peer
    int groupPort;//Port number for the multicast group
    int receptionPort;//TCP port for file transfer
    String fileName; //File name that the user input to look for
    public Boolean indicator = true;//To indicate if the file can be found on overlay
    public String existMsg; //Message for the file that exist on the overlay
    public String notexistMsg; //Message that the file can't be found on overlay
     
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        searchResultTextArea.setLineWrap(true);
        setTitle("Distributed File Sharing");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupIdLabel = new javax.swing.JLabel();
        groupIDTextField = new javax.swing.JTextField();
        peerIDLabel = new javax.swing.JLabel();
        peerIDTextField = new javax.swing.JTextField();
        groupPortLabel = new javax.swing.JLabel();
        groupPortTextField = new javax.swing.JTextField();
        receptionPortLabel = new javax.swing.JLabel();
        receptionPortTextField = new javax.swing.JTextField();
        setButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        fileNameLabel = new javax.swing.JLabel();
        fileNameTextFeild = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResultTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        groupIdLabel.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        groupIdLabel.setText("Group ID");

        groupIDTextField.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        groupIDTextField.setText("228.5.6.7");
        groupIDTextField.setToolTipText("");
        groupIDTextField.setPreferredSize(new java.awt.Dimension(60, 25));

        peerIDLabel.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        peerIDLabel.setText("Peer ID");

        peerIDTextField.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        peerIDTextField.setPreferredSize(new java.awt.Dimension(6, 25));

        groupPortLabel.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        groupPortLabel.setText("Group Port");

        groupPortTextField.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        groupPortTextField.setText("8888");
        groupPortTextField.setPreferredSize(new java.awt.Dimension(30, 25));

        receptionPortLabel.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        receptionPortLabel.setText("Reception Port");

        receptionPortTextField.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        receptionPortTextField.setPreferredSize(new java.awt.Dimension(6, 25));

        setButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        setButton.setText("Set");
        setButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setButtonActionPerformed(evt);
            }
        });

        fileNameLabel.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        fileNameLabel.setText("File Name");

        fileNameTextFeild.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N

        searchButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jLabel6.setText("Search Result");

        searchResultTextArea.setColumns(20);
        searchResultTextArea.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        searchResultTextArea.setRows(5);
        jScrollPane1.setViewportView(searchResultTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(groupIdLabel)
                                .addGap(29, 29, 29)
                                .addComponent(groupIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                                .addComponent(peerIDLabel)
                                .addGap(15, 15, 15))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(groupPortLabel)
                                .addGap(18, 18, 18)
                                .addComponent(groupPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(receptionPortLabel)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(receptionPortTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(setButton))
                            .addComponent(peerIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileNameLabel)
                        .addGap(26, 26, 26)
                        .addComponent(fileNameTextFeild)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(285, 285, 285))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupIdLabel)
                    .addComponent(groupIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peerIDLabel)
                    .addComponent(peerIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupPortLabel)
                    .addComponent(groupPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receptionPortLabel)
                    .addComponent(receptionPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameLabel)
                    .addComponent(fileNameTextFeild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * setButtonActionPerformed
     * 
     * Pressing set button will pass the value user entered to the GUI to 
     * the variable and start the receive service.
     * 
     * @param evt 
     */
    private void setButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setButtonActionPerformed
        try{
            //Get the input from the GUI
            groupIP = groupIDTextField.getText(); 
            peerID = peerIDTextField.getText();
            groupPort = Integer.parseInt(groupPortTextField.getText());
            receptionPort = Integer.parseInt(receptionPortTextField.getText());
            setButton.setEnabled(false);
            setTitle("Distributed File Sharing" + " - " + peerID);
            
            MulticastSocket ms =null;
            try {

                    //Join the multicast group
                    InetAddress group = InetAddress.getByName(groupIP);
                    int port= groupPort;
                    String myid=new String(peerID);
                    int tcpport= receptionPort;
                    ms = new MulticastSocket(port);
                    ms.joinGroup(group);

                    //Start the receive service threads
                    new ReceiveService(ms, group,tcpport, myid);
                                 

            }catch (SocketException e){System.out.println("Socket: " + e.getMessage());
            }catch (IOException e){System.out.println("IO: " + e.getMessage());}
            
        }catch(Exception ex){
            searchResultTextArea.append("Please enter the parameters and then press the Set button!");
            setButton.setEnabled(true);
        }
    }//GEN-LAST:event_setButtonActionPerformed

    /**
     * searchButtonActionPerformed
     * 
     * Pressing search button will get the request file name input by the
     * user,and start the cast service to multicast the file name to the peer
     * overlay.Also there is an indicator to indicate whether the file can
     * be found or not.
     * 
     * @param evt 
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        
        fileName = fileNameTextFeild.getText();
        indicator = false;
        MulticastSocket ms =null;
        
        try {

                //join the multicast group
                InetAddress group = InetAddress.getByName(groupIP);
                int port= groupPort;
                String myid=new String(peerID);
                int tcpport= receptionPort;
                ms = new MulticastSocket(port);
                ms.joinGroup(group);

                //start the cast service threads
                new CastService(ms, group, port,tcpport, myid, fileName); 
                //Parse the thread for 100ms to receive message
                Thread.sleep(100);
                //Indicator true maeans the file is found on other peer
                if (indicator==true) {
                    searchResultTextArea.append(existMsg);
                }else{
                    searchResultTextArea.append(notexistMsg);
                }

        }catch (SocketException e){System.out.println("Socket: " + e.getMessage());
        }catch (IOException e){System.out.println("IO: " + e.getMessage());} catch (InterruptedException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * CastService
     * 
     * This class is used to multicast the file name to the peer overlay.It 
     * has the constructor and the override run method to multicast the file 
     * name.This class is instantiated in the searchButtonActionPerformed method.
     * 
     */
    class CastService extends Thread{
        
        MulticastSocket ms =null;
	InetAddress group=null;
	int port=8888;
        int tcpport=5678;
	String myid=null;
        String filename=null;
       
        public CastService(MulticastSocket ms, InetAddress group, int port, int tcpport, String myid, String filename) {
                
                this.ms=ms;
		this.group=group;
		this.port=port;
		this.myid=myid;
                this.tcpport=tcpport;
                this.filename=filename;
		
		this.start();
        }
        
        public void run() {
		
		String msg=null;

                try {

                        //Accept a message
                        Console c = System.console();
                        //Msg equals to the file that request for
                        msg=filename;

                        if(msg.compareTo(new String("end"))==0) {
                                        ms.close();
                                        System.exit(0); 
                        } else {
                                //Multicast the message
                                msg=new String("Message from "+myid+ ": "+msg+" : "+this.tcpport);
                                byte [] m = msg.getBytes();
                                DatagramPacket messageOut = new DatagramPacket(m, m.length, group, port);
                                ms.send(messageOut);

                        }

                } catch (SocketException e){System.out.println("Socket: " + e.getMessage());
                } catch (IOException e){System.out.println("IO: " + e.getMessage());
                } 
                
	}
        
    }
    
    /**
     * ReceiveService
     * 
     * This is the class that receive the overlay message as well as receive the
     * file transfer by oter peer through tcp.It contains its constructor to run
     * the two receive service by thread, also other several methods to send and
     * receive messages and files.This class is instantiated in the setButtonAction
     * Performed method.
     * 
     */
    class ReceiveService extends Thread{
        
        MulticastSocket ms =null;
	String myid=null;
        InetAddress group=null;
        int tcpport=5678;
        int targetfiletransport=6789;
        String targetfilename=null;
        
	public ReceiveService(MulticastSocket ms,InetAddress group,int tcpport ,String myid){ 
    	
		this.ms=ms;
		this.myid=myid;
                this.group=group;
                this.tcpport=tcpport;
		
		this.start();
                
                Thread FileRcv = new Thread(() -> {
                try
                {
                    ServerSocket listenSocket = new ServerSocket(this.tcpport);
                    while(true) 
                    {
                        Socket clientSocket = listenSocket.accept();
                        FileReceive c2 = new FileReceive(clientSocket);
                    } 
                    
                }catch(IOException e) {System.out.println("Listen socket:"+e.getMessage());}
                });
                
                FileRcv.start();
	}
        
        public void run() {
		
		while (true) {		
		
			BufferedReader reader=null;
                        
			try {
 			
				//Receive the multicast messages
				byte[] buffer = new byte[300];
 				DatagramPacket messageIn = new DatagramPacket(buffer, buffer.length);
 				ms.receive(messageIn);
				String msg=new String(messageIn.getData(), 0, messageIn.getLength());
				//System.out.println(msg); 
                                
                                //msg0 equals to the file name like "Asg2.pdf"
                                String msg0=msg.toString().split(": ")[1];
                                if (msg0.contains("\\")) {
                                    msg0 = msg0.split("\\\\")[1].split(" ")[0];
                                }else{
                                    //Get target file transfer port number
                                    targetfiletransport = Integer.parseInt(msg.toString().split(": ")[2]);
                                }
                                File file = new File("SharingFiles/"+msg0);
                                
                                //Response to the request from the overlay that it has the file or not
                                String msg1=msg; 
                                //Ignore the message send by its own
                                if(!msg.split(": ")[0].split(" ")[2].equals(myid)){
                                    if (file.exists()) {
                                        //Broadcast this msg that this file exist and its tcp port number
                                        msg1=new String("Message from "+myid+ ": "+file+"exists"+" tcpPort: "+this.tcpport);
                                        //Send message to overlay
                                        MsgSend(msg1, messageIn);
                                    }else{
                                        //Broadcast to overlay that file not exist
                                        msg1=new String("Message from "+myid+ ": "+file+"notexists"); 
                                        //Send message to overlay
                                        MsgSend(msg1, messageIn);
                                    }
                                }
                                
                                //Parse the received overlay information and send the file
                                String msg2=msg; 
                                notexistMsg = "The request file: " + msg0 + " cannot be found on the peer overlay!" + "\n";
                                if (msg2.contains("\\")) {
                                    //Msg0 is the file that other peer looking for
                                    if (msg2.split("\\\\")[1].split(" ")[0].equals(msg0)) { 
                                        //If the message sent that the peerX has the file
                                        if (msg2.split("\\\\")[1].split(" ")[1].equals("exists")) { 
                                            //For the peer who has the file send the file
                                            if (Integer.parseInt(msg2.split(": ")[2]) == this.tcpport) { 
                                                targetfilename=msg0;
                                                //The peer who has the file start to send the file to who request
                                                FileSend();
                                            }
                                            //For the peer who request the file set the format of existMsg and indicator to true
                                            if (!msg.split("\\\\")[0].split(": ")[0].split(" ")[2].equals(this.myid)) {
                                                existMsg = "The file of " + msg0 + " was found, downloaded and saved as Downloaded-" + msg0 + "\n";
                                                indicator = true;
                                            }
                                        }
                                    }
                                }
                                						
			}catch (SocketException e){System.out.println("Socket: " + e.getMessage());
			}catch (UnknownHostException e){System.out.println("Socket:"+e.getMessage());
			}catch (EOFException e){System.out.println("EOF:"+e.getMessage());
			}catch (IOException e){System.out.println("IO: " + e.getMessage());
			} 

	    }
             
	}
        
        public void MsgSend(String msg, DatagramPacket messageIn) throws SocketException, IOException{
            //MsgSend method is to broadcast the message to the overlay group
                DatagramSocket aSocket = new DatagramSocket();    
                byte [] m = msg.getBytes();
                DatagramPacket request =
                        new DatagramPacket(m,  m.length, group, messageIn.getPort());
                
                aSocket.send(request);
        }
        
        public void FileSend(){
            //FileSend method is to send the file by tcp to who request the file
                try {

                   InetAddress ServerName = InetAddress.getByName("localhost");
                   int ServerPort = targetfiletransport;
                   Socket s = new Socket(ServerName, ServerPort);
                   File file = new File("SharingFiles/"+targetfilename);
                   FileInputStream fis = new FileInputStream(file);
                   DataOutputStream dos = new DataOutputStream(s.getOutputStream());

                   // File name and its length
                   dos.writeUTF(file.getName());
                   dos.flush();
                   dos.writeLong(file.length());
                   dos.flush();

                   // Start to send file
                   byte[] bytes = new byte[1024];
                   int length = 0;
                   long progress = 0;
                   while((length = fis.read(bytes, 0, bytes.length)) != -1) {
                       dos.write(bytes, 0, length);
                       dos.flush();
                       progress += length;
                   }
                   
                }catch (Exception e){e.printStackTrace();} 
        }
        
        /**
         * FileReceive
         * 
         * This class is to receive the file by the tcp port.It contains its 
         * constructor and the override run method.It can receive any type and
         * any any length of the file.This is instantiated on the constructor 
         * of ReceiveService class.
         * 
         */
        class FileReceive extends Thread {
                
                InputStream in;
                OutputStream out;
                Socket clientSocket;

                public FileReceive (Socket aClientSocket) {
                    
                    try {
                        clientSocket = aClientSocket;
                        in = clientSocket.getInputStream();
                        //Start the thread
                        this.start();
                        
                    } catch(IOException e) {
                        System.out.println("Connection:"+e.getMessage());
                    }
                }

                public void run() {
                    
                    String ClassName=new String();
                    while (true) {	
                        try {			                
                            DataInputStream dis = new DataInputStream(in);
                            // File name and its length
                            String fileName = dis.readUTF();
                            long fileLength = dis.readLong();
                            fileName = "Downloaded-" + fileName;
                            FileOutputStream fos = new FileOutputStream("SharingFiles/"+fileName);

                            // Start to receive file
                            byte[] bytes = new byte[1024];
                            int length = 0;
                            while((length = dis.read(bytes, 0, bytes.length)) != -1) {
                                fos.write(bytes, 0, length);
                                fos.flush();
                            }

                        }catch (EOFException e){System.out.println("EOF"+e.getMessage());break;
                        }catch (FileNotFoundException e){System.out.println("File "+ClassName+" cannot find.");break;
                        }catch (SocketException e){System.out.println("Client closed.");break;
                        }catch(IOException e){e.printStackTrace(); break;
                        }
                    }
                }
            }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JTextField fileNameTextFeild;
    private javax.swing.JTextField groupIDTextField;
    private javax.swing.JLabel groupIdLabel;
    private javax.swing.JLabel groupPortLabel;
    private javax.swing.JTextField groupPortTextField;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel peerIDLabel;
    private javax.swing.JTextField peerIDTextField;
    private javax.swing.JLabel receptionPortLabel;
    private javax.swing.JTextField receptionPortTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextArea searchResultTextArea;
    private javax.swing.JButton setButton;
    // End of variables declaration//GEN-END:variables
}
